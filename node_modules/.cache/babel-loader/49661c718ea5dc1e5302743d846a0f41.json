{"ast":null,"code":"import { WEATHER_DAY_SELECTED, WEATHER_LOCATION_QUERY, WEATHER_ERROR, WEATHER_FETCHING, WEATHER_LOCATION_SELECTED, WEATHER_LOCATION_WEATHER_SUCCESS, WEATHER_LOCATION_FETCHING, WEATHER_LOCATION_SUCCESS, WEATHER_SUCCESS, WEATHER_LOCATION_WEATHER_FETCHING } from './actions';\nexport const initialState = {\n  locations: {\n    fetching: false,\n    query: '',\n    weathers: [],\n    results: []\n  },\n  selectedDay: 0,\n  weather: {\n    fetching: true,\n    error: true,\n    hourly: [],\n    daily: []\n  }\n};\nexport const storeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WEATHER_LOCATION_QUERY:\n      return { ...state,\n        locations: { ...state.locations,\n          query: action.payload\n        }\n      };\n\n    case WEATHER_LOCATION_FETCHING:\n      return { ...state,\n        locations: { ...state.locations,\n          fetching: true,\n          results: [],\n          weathers: []\n        }\n      };\n\n    case WEATHER_LOCATION_SUCCESS:\n      return { ...state,\n        locations: { ...state.locations,\n          fetching: false,\n          ...action.payload\n        }\n      };\n\n    case WEATHER_LOCATION_SELECTED:\n      return { ...state,\n        locations: { ...state.locations,\n          query: `${action.payload.name}, ${action.payload.state}`,\n          results: [],\n          weathers: []\n        }\n      };\n\n    case WEATHER_LOCATION_WEATHER_FETCHING:\n      return { ...state,\n        locations: { ...state.locations,\n          fetching: true,\n          weathers: []\n        }\n      };\n\n    case WEATHER_LOCATION_WEATHER_SUCCESS:\n      return { ...state,\n        locations: { ...state.locations,\n          weathers: [...state.locations.weathers, ...action.payload]\n        }\n      };\n\n    case WEATHER_FETCHING:\n      return { ...state,\n        weather: { ...state.weather,\n          fetching: true,\n          selectedDay: 0,\n          hourly: [],\n          daily: []\n        }\n      };\n\n    case WEATHER_SUCCESS:\n      return { ...state,\n        weather: { ...state.weather,\n          fetching: false,\n          hourly: action.payload.hourly,\n          daily: action.payload.daily\n        }\n      };\n\n    case WEATHER_ERROR:\n      return { ...state,\n        weather: { ...state.weather,\n          fetching: false,\n          error: true,\n          hourly: [],\n          daily: []\n        }\n      };\n\n    case WEATHER_DAY_SELECTED:\n      return { ...state,\n        selectedDay: action.payload\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/store/reducer.js"],"names":["WEATHER_DAY_SELECTED","WEATHER_LOCATION_QUERY","WEATHER_ERROR","WEATHER_FETCHING","WEATHER_LOCATION_SELECTED","WEATHER_LOCATION_WEATHER_SUCCESS","WEATHER_LOCATION_FETCHING","WEATHER_LOCATION_SUCCESS","WEATHER_SUCCESS","WEATHER_LOCATION_WEATHER_FETCHING","initialState","locations","fetching","query","weathers","results","selectedDay","weather","error","hourly","daily","storeReducer","state","action","type","payload","name"],"mappings":"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","sourcesContent":["import { WEATHER_DAY_SELECTED, WEATHER_LOCATION_QUERY, WEATHER_ERROR, WEATHER_FETCHING, WEATHER_LOCATION_SELECTED, WEATHER_LOCATION_WEATHER_SUCCESS, WEATHER_LOCATION_FETCHING, WEATHER_LOCATION_SUCCESS, WEATHER_SUCCESS, WEATHER_LOCATION_WEATHER_FETCHING } from './actions';\n\nexport const initialState = {\n  locations: {\n    fetching: false,\n    query: '',\n    weathers: [],\n    results: [],\n  },\n  selectedDay: 0,\n  weather: {\n    fetching: true,\n    error: true,\n    hourly: [],\n    daily: [],\n  }\n};\n\nexport const storeReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case WEATHER_LOCATION_QUERY:\n      return { ...state, locations: { ...state.locations, query: action.payload } };\n    case WEATHER_LOCATION_FETCHING:\n      return { ...state, locations: { ...state.locations, fetching: true, results: [], weathers: [] } };\n    case WEATHER_LOCATION_SUCCESS:\n      return { ...state, locations: { ...state.locations, fetching: false, ...action.payload } };\n    case WEATHER_LOCATION_SELECTED:\n      return { ...state, locations: { ...state.locations, query: `${action.payload.name}, ${action.payload.state}`, results: [], weathers: [] } };\n    case WEATHER_LOCATION_WEATHER_FETCHING:\n      return { ...state, locations: { ...state.locations, fetching: true, weathers: [] } };\n    case WEATHER_LOCATION_WEATHER_SUCCESS:\n      return { ...state, locations: { ...state.locations, weathers: [...state.locations.weathers, ...action.payload] } };\n    case WEATHER_FETCHING:\n      return { ...state, weather: { ...state.weather, fetching: true, selectedDay: 0, hourly: [], daily: [] } };\n    case WEATHER_SUCCESS:\n      return { ...state, weather: { ...state.weather, fetching: false, hourly: action.payload.hourly, daily: action.payload.daily } };\n    case WEATHER_ERROR:\n      return { ...state, weather: { ...state.weather, fetching: false, error: true, hourly: [], daily: [] } };\n    case WEATHER_DAY_SELECTED:\n      return { ...state, selectedDay: action.payload };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}