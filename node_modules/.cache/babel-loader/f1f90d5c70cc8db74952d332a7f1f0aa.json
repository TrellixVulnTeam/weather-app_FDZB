{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React from\"react\";import{Container,LocationIcon,SearchIcon,Input,ResultsList,Result,ResultWeather,Icon}from\"./styles\";import{faMapMarkerAlt,faSearch}from\"@fortawesome/free-solid-svg-icons\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import Text from\"../Text\";import{getCelsius,getImageName}from\"../../utils\";var Autocomplete=function Autocomplete(_ref){var onChange=_ref.onChange,locations=_ref.locations,_onClick=_ref.onClick;return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(LocationIcon,{children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faMapMarkerAlt})}),/*#__PURE__*/_jsx(Input,{onChange:onChange,value:locations.query}),/*#__PURE__*/_jsx(SearchIcon,{children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faSearch})}),locations.results.length&&locations.weathers.length?/*#__PURE__*/_jsx(ResultsList,{children:locations.results.map(function(r){var weather=locations.weathers.find(function(w){return w.locationName===r.name;});return/*#__PURE__*/_jsxs(Result,{onClick:function onClick(){return _onClick(r);},children:[console.log(r.name,locations.query),/*#__PURE__*/_jsxs(Text,{capitalize:true,children:[r.name.slice(0,r.name.toUpperCase().indexOf(locations.query.toUpperCase())),/*#__PURE__*/_jsx(Text,{bold:true,capitalize:true,children:locations.query}),r.name.slice(r.name.toUpperCase().indexOf(locations.query.toUpperCase())+locations.query.length),/*#__PURE__*/_jsxs(Text,{faded:true,children:[\" \",r.state]})]}),weather&&/*#__PURE__*/_jsxs(ResultWeather,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(Text,{children:[getCelsius(weather.main.temp),\"\\xB0 C\"]}),/*#__PURE__*/_jsx(Text,{faded:true,children:weather.weather[0].main})]}),/*#__PURE__*/_jsx(Icon,{src:\"/images/\".concat(getImageName(weather.weather[0].main)),alt:weather.weather[0].main})]})]},r.name);})}):null]});};export default Autocomplete;","map":{"version":3,"sources":["/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/components/Autocomplete/index.js"],"names":["React","Container","LocationIcon","SearchIcon","Input","ResultsList","Result","ResultWeather","Icon","faMapMarkerAlt","faSearch","FontAwesomeIcon","Text","getCelsius","getImageName","Autocomplete","onChange","locations","onClick","query","results","length","weathers","map","r","weather","find","w","locationName","name","console","log","slice","toUpperCase","indexOf","state","main","temp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container, LocationIcon, SearchIcon, Input, ResultsList, Result, ResultWeather, Icon } from \"./styles\";\nimport { faMapMarkerAlt, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Text from \"../Text\";\nimport { getCelsius, getImageName } from \"../../utils\";\n\nconst Autocomplete = ({ onChange, locations, onClick }) => {\n  return (\n    <Container>\n      <LocationIcon>\n        <FontAwesomeIcon icon={faMapMarkerAlt} />\n      </LocationIcon>\n      <Input onChange={onChange} value={locations.query} />\n      <SearchIcon>\n        <FontAwesomeIcon icon={faSearch} />\n      </SearchIcon>\n      {\n        locations.results.length && locations.weathers.length\n          ? (\n            <ResultsList>\n              {\n                locations.results.map(r => {\n                  const weather = locations.weathers.find(w => w.locationName === r.name);\n                  return (\n                    <Result key={r.name} onClick={() => onClick(r)}>\n                      {console.log(r.name, locations.query)}\n                      <Text capitalize>\n                        {r.name.slice(0, r.name.toUpperCase().indexOf(locations.query.toUpperCase()))}\n                        <Text bold capitalize>{locations.query}</Text>\n                        {r.name.slice(r.name.toUpperCase().indexOf(locations.query.toUpperCase()) + locations.query.length)}\n                        <Text faded> {r.state}</Text>\n                      </Text>\n                      {\n                        weather\n                        && (\n                          <ResultWeather>\n                            <div>\n                              <Text>{getCelsius(weather.main.temp)}Â° C</Text>\n                              <Text faded>{weather.weather[0].main}</Text>\n                            </div>\n                            <Icon src={`/images/${getImageName(weather.weather[0].main)}`} alt={weather.weather[0].main} />\n                          </ResultWeather>\n                        )\n                      }\n                    </Result>\n                  )\n                })\n              }\n            </ResultsList>\n          )\n          : null\n      }\n    </Container>\n  )\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}