{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/components/Autocomplete/index.js\";\nimport React from \"react\";\nimport { Container, LocationIcon, SearchIcon, Input, ResultsList, Result, ResultWeather, Icon } from \"./styles\";\nimport { faMapMarkerAlt, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Text from \"../Text\";\nimport { getCelsius, getImageName } from \"../../utils\";\n\nconst Autocomplete = ({\n  onChange,\n  locations,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(LocationIcon, {\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faMapMarkerAlt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      onChange: onChange,\n      value: locations.query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchIcon, {\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), locations.results.length && locations.weathers.length ? /*#__PURE__*/_jsxDEV(ResultsList, {\n      children: locations.results.map(r => {\n        const weather = locations.weathers.find(w => w.locationName === r.name);\n        return /*#__PURE__*/_jsxDEV(Result, {\n          onClick: () => onClick(r),\n          children: [console.log(r.name, locations.query), /*#__PURE__*/_jsxDEV(Text, {\n            capitalize: true,\n            children: [r.name.slice(0, r.name.toUpperCase().indexOf(locations.query.toUpperCase())), /*#__PURE__*/_jsxDEV(Text, {\n              bold: true,\n              capitalize: true,\n              children: locations.query\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 25\n            }, this), r.name.slice(r.name.toUpperCase().indexOf(locations.query.toUpperCase()) + locations.query.length), /*#__PURE__*/_jsxDEV(Text, {\n              faded: true,\n              children: [\" \", r.state]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 23\n          }, this), weather && /*#__PURE__*/_jsxDEV(ResultWeather, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(Text, {\n                children: [getCelsius(weather.main.temp), \"\\xB0 C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 31\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                faded: true,\n                children: weather.weather[0].main\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 31\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              src: `/images/${getImageName(weather.weather[0].main)}`,\n              alt: weather.weather[0].main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 27\n          }, this)]\n        }, r.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Autocomplete;\nexport default Autocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"Autocomplete\");","map":{"version":3,"sources":["/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/components/Autocomplete/index.js"],"names":["React","Container","LocationIcon","SearchIcon","Input","ResultsList","Result","ResultWeather","Icon","faMapMarkerAlt","faSearch","FontAwesomeIcon","Text","getCelsius","getImageName","Autocomplete","onChange","locations","onClick","query","results","length","weathers","map","r","weather","find","w","locationName","name","console","log","slice","toUpperCase","indexOf","state","main","temp"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Container, LocationIcon, SearchIcon, Input, ResultsList, Result, ResultWeather, Icon } from \"./styles\";\nimport { faMapMarkerAlt, faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Text from \"../Text\";\nimport { getCelsius, getImageName } from \"../../utils\";\n\nconst Autocomplete = ({ onChange, locations, onClick }) => {\n  return (\n    <Container>\n      <LocationIcon>\n        <FontAwesomeIcon icon={faMapMarkerAlt} />\n      </LocationIcon>\n      <Input onChange={onChange} value={locations.query} />\n      <SearchIcon>\n        <FontAwesomeIcon icon={faSearch} />\n      </SearchIcon>\n      {\n        locations.results.length && locations.weathers.length\n          ? (\n            <ResultsList>\n              {\n                locations.results.map(r => {\n                  const weather = locations.weathers.find(w => w.locationName === r.name);\n                  return (\n                    <Result key={r.name} onClick={() => onClick(r)}>\n                      {console.log(r.name, locations.query)}\n                      <Text capitalize>\n                        {r.name.slice(0, r.name.toUpperCase().indexOf(locations.query.toUpperCase()))}\n                        <Text bold capitalize>{locations.query}</Text>\n                        {r.name.slice(r.name.toUpperCase().indexOf(locations.query.toUpperCase()) + locations.query.length)}\n                        <Text faded> {r.state}</Text>\n                      </Text>\n                      {\n                        weather\n                        && (\n                          <ResultWeather>\n                            <div>\n                              <Text>{getCelsius(weather.main.temp)}Â° C</Text>\n                              <Text faded>{weather.weather[0].main}</Text>\n                            </div>\n                            <Icon src={`/images/${getImageName(weather.weather[0].main)}`} alt={weather.weather[0].main} />\n                          </ResultWeather>\n                        )\n                      }\n                    </Result>\n                  )\n                })\n              }\n            </ResultsList>\n          )\n          : null\n      }\n    </Container>\n  )\n}\n\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}