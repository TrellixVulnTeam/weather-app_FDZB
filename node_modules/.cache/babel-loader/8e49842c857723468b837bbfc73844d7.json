{"ast":null,"code":"import _objectSpread from\"/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useContext,useEffect}from'react';import{Container,Loader}from'./styles';import Autocomplete from'../../components/Autocomplete';import ForcastList from'../../components/ForcastList';import WeatherCard from'../../components/WeatherCard';import{getWeather,getLocations,getWeatherShort,locationsArray}from'../../services';import{WEATHER_LOCATION_QUERY,WEATHER_LOCATION_FETCHING,WEATHER_LOCATION_SUCCESS,WEATHER_LOCATION_SELECTED,WEATHER_LOCATION_WEATHER_SUCCESS,WEATHER_LOCATION_WEATHER_FETCHING,WEATHER_SUCCESS,WEATHER_DAY_SELECTED}from'../../store/actions';import{storeContext}from'../../store';import{debounce}from'../../utils';var WeatherScreen=function WeatherScreen(){var _useContext=useContext(storeContext),store=_useContext.store,dispatch=_useContext.dispatch;var onSearchClick=function onSearchClick(item){dispatch({type:WEATHER_LOCATION_SELECTED,payload:item});getWeather(item).then(function(resp){dispatch({type:WEATHER_SUCCESS,payload:{hourly:resp.data.hourly,daily:resp.data.daily}});});};var onSearch=debounce(function(e){var query=e.target.value;if(query.trim().length&&query!==store.locations.query){dispatch({type:WEATHER_LOCATION_FETCHING});var results=getLocations(query);dispatch({type:WEATHER_LOCATION_SUCCESS,payload:{results:results,query:query}});dispatch({type:WEATHER_LOCATION_WEATHER_FETCHING});Promise.all(results.map(function(r){return getWeatherShort(r).then(function(resp){return _objectSpread(_objectSpread({},resp.data),{},{locationName:r.name});});})).then(function(resp){dispatch({type:WEATHER_LOCATION_WEATHER_SUCCESS,payload:resp});});}else{dispatch({type:WEATHER_LOCATION_SUCCESS,payload:{results:[],query:query}});}},500);var onChange=function onChange(e){dispatch({type:WEATHER_LOCATION_QUERY,payload:e.target.value});onSearch(e);};var onForcastClick=function onForcastClick(e){dispatch({type:WEATHER_DAY_SELECTED,payload:Number(e.target.value)});};useEffect(function(){onSearchClick(locationsArray[0]);},[]);return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Autocomplete,{onChange:onChange,locations:store.locations,onClick:onSearchClick}),!store.weather.fetching?/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(ForcastList,{daily:store.weather.daily,onClick:onForcastClick,selectedDay:store.selectedDay}),/*#__PURE__*/_jsx(WeatherCard,{current:store.weather.daily[store.selectedDay],hourly:store.weather.hourly,selectedDay:store.selectedDay})]}):/*#__PURE__*/_jsx(Loader,{children:\"Loading...\"})]});};export default WeatherScreen;","map":{"version":3,"sources":["/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/containers/WeatherScreen/index.js"],"names":["React","useContext","useEffect","Container","Loader","Autocomplete","ForcastList","WeatherCard","getWeather","getLocations","getWeatherShort","locationsArray","WEATHER_LOCATION_QUERY","WEATHER_LOCATION_FETCHING","WEATHER_LOCATION_SUCCESS","WEATHER_LOCATION_SELECTED","WEATHER_LOCATION_WEATHER_SUCCESS","WEATHER_LOCATION_WEATHER_FETCHING","WEATHER_SUCCESS","WEATHER_DAY_SELECTED","storeContext","debounce","WeatherScreen","store","dispatch","onSearchClick","item","type","payload","then","resp","hourly","data","daily","onSearch","e","query","target","value","trim","length","locations","results","Promise","all","map","r","locationName","name","onChange","onForcastClick","Number","weather","fetching","selectedDay"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { Container, Loader } from './styles';\nimport Autocomplete from '../../components/Autocomplete';\nimport ForcastList from '../../components/ForcastList';\nimport WeatherCard from '../../components/WeatherCard';\nimport { getWeather, getLocations, getWeatherShort, locationsArray } from '../../services';\nimport { WEATHER_LOCATION_QUERY, WEATHER_LOCATION_FETCHING, WEATHER_LOCATION_SUCCESS, WEATHER_LOCATION_SELECTED, WEATHER_LOCATION_WEATHER_SUCCESS, WEATHER_LOCATION_WEATHER_FETCHING, WEATHER_SUCCESS, WEATHER_DAY_SELECTED } from '../../store/actions';\nimport { storeContext } from '../../store';\nimport { debounce } from '../../utils';\n\nconst WeatherScreen = () => {\n  const { store, dispatch } = useContext(storeContext);\n\n  const onSearchClick = (item) => {\n    dispatch({ type: WEATHER_LOCATION_SELECTED, payload: item });\n    getWeather(item).then(resp => {\n      dispatch({\n        type: WEATHER_SUCCESS, payload: {\n          hourly: resp.data.hourly,\n          daily: resp.data.daily\n        }\n      });\n    });\n  }\n\n  const onSearch = debounce((e) => {\n    const query = e.target.value;\n    if (query.trim().length && query !== store.locations.query) {\n      dispatch({ type: WEATHER_LOCATION_FETCHING });\n      const results = getLocations(query);\n      dispatch({ type: WEATHER_LOCATION_SUCCESS, payload: { results, query } });\n      dispatch({ type: WEATHER_LOCATION_WEATHER_FETCHING });\n      Promise\n        .all(results.map(r => getWeatherShort(r).then(resp => ({ ...resp.data, locationName: r.name }))))\n        .then(resp => {\n          dispatch({ type: WEATHER_LOCATION_WEATHER_SUCCESS, payload: resp });\n        });\n    } else {\n      dispatch({ type: WEATHER_LOCATION_SUCCESS, payload: { results: [], query } });\n    }\n  }, 500);\n\n  const onChange = (e) => {\n    dispatch({ type: WEATHER_LOCATION_QUERY, payload: e.target.value });\n    onSearch(e);\n  }\n\n  const onForcastClick = (e) => {\n    dispatch({ type: WEATHER_DAY_SELECTED, payload: Number(e.target.value) });\n  }\n\n  useEffect(() => {\n    onSearchClick(locationsArray[0]);\n  }, [])\n\n  return (\n    <Container>\n      <Autocomplete onChange={onChange} locations={store.locations} onClick={onSearchClick} />\n      {\n        !store.weather.fetching\n          ? (\n            <React.Fragment>\n              <ForcastList daily={store.weather.daily} onClick={onForcastClick} selectedDay={store.selectedDay} />\n              <WeatherCard current={store.weather.daily[store.selectedDay]} hourly={store.weather.hourly} selectedDay={store.selectedDay} />\n            </React.Fragment>\n          )\n          : <Loader>Loading...</Loader>\n      }\n    </Container>\n  );\n}\n\nexport default WeatherScreen;"]},"metadata":{},"sourceType":"module"}