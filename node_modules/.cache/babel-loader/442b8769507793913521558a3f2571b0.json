{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/containers/WeatherScreen/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { Container, Loader } from './styles';\nimport Autocomplete from '../../components/Autocomplete';\nimport ForcastList from '../../components/ForcastList';\nimport WeatherCard from '../../components/WeatherCard';\nimport { getWeather, getLocations, getWeatherShort, locationsArray } from '../../services';\nimport { WEATHER_LOCATION_QUERY, WEATHER_LOCATION_FETCHING, WEATHER_LOCATION_SUCCESS, WEATHER_LOCATION_SELECTED, WEATHER_LOCATION_WEATHER_SUCCESS, WEATHER_LOCATION_WEATHER_FETCHING, WEATHER_SUCCESS, WEATHER_DAY_SELECTED } from '../../store/actions';\nimport { storeContext } from '../../store';\nimport { debounce } from '../../utils';\n\nconst WeatherScreen = () => {\n  _s();\n\n  const {\n    store,\n    dispatch\n  } = useContext(storeContext);\n\n  const onSearchClick = item => {\n    dispatch({\n      type: WEATHER_LOCATION_SELECTED,\n      payload: item\n    });\n    getWeather(item).then(resp => {\n      dispatch({\n        type: WEATHER_SUCCESS,\n        payload: {\n          hourly: resp.data.hourly,\n          daily: resp.data.daily\n        }\n      });\n    });\n  };\n\n  const onSearch = debounce(e => {\n    const query = e.target.value;\n\n    if (query.trim().length && query !== store.locations.query) {\n      dispatch({\n        type: WEATHER_LOCATION_FETCHING\n      });\n      const results = getLocations(query);\n      dispatch({\n        type: WEATHER_LOCATION_SUCCESS,\n        payload: {\n          results,\n          query\n        }\n      });\n      dispatch({\n        type: WEATHER_LOCATION_WEATHER_FETCHING\n      });\n      Promise.all(results.map(r => getWeatherShort(r).then(resp => ({ ...resp.data,\n        locationName: r.name\n      })))).then(resp => {\n        dispatch({\n          type: WEATHER_LOCATION_WEATHER_SUCCESS,\n          payload: resp\n        });\n      });\n    } else {\n      dispatch({\n        type: WEATHER_LOCATION_SUCCESS,\n        payload: {\n          results: [],\n          query\n        }\n      });\n    }\n  }, 500);\n\n  const onChange = e => {\n    dispatch({\n      type: WEATHER_LOCATION_QUERY,\n      payload: e.target.value\n    });\n    onSearch(e);\n  };\n\n  const onForcastClick = e => {\n    dispatch({\n      type: WEATHER_DAY_SELECTED,\n      payload: Number(e.target.value)\n    });\n  };\n\n  useEffect(() => {\n    onSearchClick(locationsArray[0]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      onChange: onChange,\n      locations: store.locations,\n      onClick: onSearchClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), !store.weather.fetching ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ForcastList, {\n        daily: store.weather.daily,\n        onClick: onForcastClick,\n        selectedDay: store.selectedDay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(WeatherCard, {\n        current: store.weather.daily[store.selectedDay],\n        hourly: store.weather.hourly,\n        selectedDay: store.selectedDay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Loader, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherScreen, \"UX36+lg+vyM5nc+z0YeH6osk4lg=\");\n\n_c = WeatherScreen;\nexport default WeatherScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherScreen\");","map":{"version":3,"sources":["/Users/ankitsrivastava/Desktop/react/richpanel-weather-app/src/containers/WeatherScreen/index.js"],"names":["React","useContext","useEffect","Container","Loader","Autocomplete","ForcastList","WeatherCard","getWeather","getLocations","getWeatherShort","locationsArray","WEATHER_LOCATION_QUERY","WEATHER_LOCATION_FETCHING","WEATHER_LOCATION_SUCCESS","WEATHER_LOCATION_SELECTED","WEATHER_LOCATION_WEATHER_SUCCESS","WEATHER_LOCATION_WEATHER_FETCHING","WEATHER_SUCCESS","WEATHER_DAY_SELECTED","storeContext","debounce","WeatherScreen","store","dispatch","onSearchClick","item","type","payload","then","resp","hourly","data","daily","onSearch","e","query","target","value","trim","length","locations","results","Promise","all","map","r","locationName","name","onChange","onForcastClick","Number","weather","fetching","selectedDay"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,UAAlC;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,UAAT,EAAqBC,YAArB,EAAmCC,eAAnC,EAAoDC,cAApD,QAA0E,gBAA1E;AACA,SAASC,sBAAT,EAAiCC,yBAAjC,EAA4DC,wBAA5D,EAAsFC,yBAAtF,EAAiHC,gCAAjH,EAAmJC,iCAAnJ,EAAsLC,eAAtL,EAAuMC,oBAAvM,QAAmO,qBAAnO;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBvB,UAAU,CAACmB,YAAD,CAAtC;;AAEA,QAAMK,aAAa,GAAIC,IAAD,IAAU;AAC9BF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEZ,yBAAR;AAAmCa,MAAAA,OAAO,EAAEF;AAA5C,KAAD,CAAR;AACAlB,IAAAA,UAAU,CAACkB,IAAD,CAAV,CAAiBG,IAAjB,CAAsBC,IAAI,IAAI;AAC5BN,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAET,eADC;AACgBU,QAAAA,OAAO,EAAE;AAC9BG,UAAAA,MAAM,EAAED,IAAI,CAACE,IAAL,CAAUD,MADY;AAE9BE,UAAAA,KAAK,EAAEH,IAAI,CAACE,IAAL,CAAUC;AAFa;AADzB,OAAD,CAAR;AAMD,KAPD;AAQD,GAVD;;AAYA,QAAMC,QAAQ,GAAGb,QAAQ,CAAEc,CAAD,IAAO;AAC/B,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAvB;;AACA,QAAIF,KAAK,CAACG,IAAN,GAAaC,MAAb,IAAuBJ,KAAK,KAAKb,KAAK,CAACkB,SAAN,CAAgBL,KAArD,EAA4D;AAC1DZ,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAR;AACA,YAAM6B,OAAO,GAAGjC,YAAY,CAAC2B,KAAD,CAA5B;AACAZ,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEb,wBAAR;AAAkCc,QAAAA,OAAO,EAAE;AAAEc,UAAAA,OAAF;AAAWN,UAAAA;AAAX;AAA3C,OAAD,CAAR;AACAZ,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEV;AAAR,OAAD,CAAR;AACA0B,MAAAA,OAAO,CACJC,GADH,CACOF,OAAO,CAACG,GAAR,CAAYC,CAAC,IAAIpC,eAAe,CAACoC,CAAD,CAAf,CAAmBjB,IAAnB,CAAwBC,IAAI,KAAK,EAAE,GAAGA,IAAI,CAACE,IAAV;AAAgBe,QAAAA,YAAY,EAAED,CAAC,CAACE;AAAhC,OAAL,CAA5B,CAAjB,CADP,EAEGnB,IAFH,CAEQC,IAAI,IAAI;AACZN,QAAAA,QAAQ,CAAC;AAAEG,UAAAA,IAAI,EAAEX,gCAAR;AAA0CY,UAAAA,OAAO,EAAEE;AAAnD,SAAD,CAAR;AACD,OAJH;AAKD,KAVD,MAUO;AACLN,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAEb,wBAAR;AAAkCc,QAAAA,OAAO,EAAE;AAAEc,UAAAA,OAAO,EAAE,EAAX;AAAeN,UAAAA;AAAf;AAA3C,OAAD,CAAR;AACD;AACF,GAfwB,EAetB,GAfsB,CAAzB;;AAiBA,QAAMa,QAAQ,GAAId,CAAD,IAAO;AACtBX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEf,sBAAR;AAAgCgB,MAAAA,OAAO,EAAEO,CAAC,CAACE,MAAF,CAASC;AAAlD,KAAD,CAAR;AACAJ,IAAAA,QAAQ,CAACC,CAAD,CAAR;AACD,GAHD;;AAKA,QAAMe,cAAc,GAAIf,CAAD,IAAO;AAC5BX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,oBAAR;AAA8BS,MAAAA,OAAO,EAAEuB,MAAM,CAAChB,CAAC,CAACE,MAAF,CAASC,KAAV;AAA7C,KAAD,CAAR;AACD,GAFD;;AAIApC,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,aAAa,CAACd,cAAc,CAAC,CAAD,CAAf,CAAb;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,SAAD;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAEsC,QAAxB;AAAkC,MAAA,SAAS,EAAE1B,KAAK,CAACkB,SAAnD;AAA8D,MAAA,OAAO,EAAEhB;AAAvE;AAAA;AAAA;AAAA;AAAA,YADF,EAGI,CAACF,KAAK,CAAC6B,OAAN,CAAcC,QAAf,gBAEI,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,KAAK,EAAE9B,KAAK,CAAC6B,OAAN,CAAcnB,KAAlC;AAAyC,QAAA,OAAO,EAAEiB,cAAlD;AAAkE,QAAA,WAAW,EAAE3B,KAAK,CAAC+B;AAArF;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,WAAD;AAAa,QAAA,OAAO,EAAE/B,KAAK,CAAC6B,OAAN,CAAcnB,KAAd,CAAoBV,KAAK,CAAC+B,WAA1B,CAAtB;AAA8D,QAAA,MAAM,EAAE/B,KAAK,CAAC6B,OAAN,CAAcrB,MAApF;AAA4F,QAAA,WAAW,EAAER,KAAK,CAAC+B;AAA/G;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,gBAOI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVR;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA5DD;;GAAMhC,a;;KAAAA,a;AA8DN,eAAeA,aAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport { Container, Loader } from './styles';\nimport Autocomplete from '../../components/Autocomplete';\nimport ForcastList from '../../components/ForcastList';\nimport WeatherCard from '../../components/WeatherCard';\nimport { getWeather, getLocations, getWeatherShort, locationsArray } from '../../services';\nimport { WEATHER_LOCATION_QUERY, WEATHER_LOCATION_FETCHING, WEATHER_LOCATION_SUCCESS, WEATHER_LOCATION_SELECTED, WEATHER_LOCATION_WEATHER_SUCCESS, WEATHER_LOCATION_WEATHER_FETCHING, WEATHER_SUCCESS, WEATHER_DAY_SELECTED } from '../../store/actions';\nimport { storeContext } from '../../store';\nimport { debounce } from '../../utils';\n\nconst WeatherScreen = () => {\n  const { store, dispatch } = useContext(storeContext);\n\n  const onSearchClick = (item) => {\n    dispatch({ type: WEATHER_LOCATION_SELECTED, payload: item });\n    getWeather(item).then(resp => {\n      dispatch({\n        type: WEATHER_SUCCESS, payload: {\n          hourly: resp.data.hourly,\n          daily: resp.data.daily\n        }\n      });\n    });\n  }\n\n  const onSearch = debounce((e) => {\n    const query = e.target.value;\n    if (query.trim().length && query !== store.locations.query) {\n      dispatch({ type: WEATHER_LOCATION_FETCHING });\n      const results = getLocations(query);\n      dispatch({ type: WEATHER_LOCATION_SUCCESS, payload: { results, query } });\n      dispatch({ type: WEATHER_LOCATION_WEATHER_FETCHING });\n      Promise\n        .all(results.map(r => getWeatherShort(r).then(resp => ({ ...resp.data, locationName: r.name }))))\n        .then(resp => {\n          dispatch({ type: WEATHER_LOCATION_WEATHER_SUCCESS, payload: resp });\n        });\n    } else {\n      dispatch({ type: WEATHER_LOCATION_SUCCESS, payload: { results: [], query } });\n    }\n  }, 500);\n\n  const onChange = (e) => {\n    dispatch({ type: WEATHER_LOCATION_QUERY, payload: e.target.value });\n    onSearch(e);\n  }\n\n  const onForcastClick = (e) => {\n    dispatch({ type: WEATHER_DAY_SELECTED, payload: Number(e.target.value) });\n  }\n\n  useEffect(() => {\n    onSearchClick(locationsArray[0]);\n  }, [])\n\n  return (\n    <Container>\n      <Autocomplete onChange={onChange} locations={store.locations} onClick={onSearchClick} />\n      {\n        !store.weather.fetching\n          ? (\n            <React.Fragment>\n              <ForcastList daily={store.weather.daily} onClick={onForcastClick} selectedDay={store.selectedDay} />\n              <WeatherCard current={store.weather.daily[store.selectedDay]} hourly={store.weather.hourly} selectedDay={store.selectedDay} />\n            </React.Fragment>\n          )\n          : <Loader>Loading...</Loader>\n      }\n    </Container>\n  );\n}\n\nexport default WeatherScreen;"]},"metadata":{},"sourceType":"module"}